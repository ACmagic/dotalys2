package de.lighti.io;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.swing.filechooser.FileFilter;

import de.lighti.DotaPlay;
import de.lighti.DotaPlay.ProgressListener;
import de.lighti.DotaPlayFactory;
import de.lighti.Dotalys2;
import de.lighti.GameEventListener;
import de.lighti.model.AppState;
import de.lighti.model.Statics;
import de.lighti.parsing.AbilityTracker;
import de.lighti.parsing.CreepHandler;
import de.lighti.parsing.EncounterTracker;
import de.lighti.parsing.GeneralGameStateTracker;
import de.lighti.parsing.HeroTracker;
import de.lighti.parsing.ItemTracker;
import de.lighti.parsing.PlayersTracker;
import de.lighti.parsing.RoshanTracker;
import de.lighti.parsing.TowerTracker;

public final class DataImporter {
    private final static ResourceBundle messages;;

    static {
        messages = ResourceBundle.getBundle( "MessagesBundle", Locale.getDefault() );
    }

    public static final FileFilter FILE_FILTER = new FileFilter() {

        @Override
        public boolean accept( File f ) {
            return f.isDirectory() || f.getName().endsWith( ".dem" );
        }

        @Override
        public String getDescription() {
            return "Dota2 Replay files (*.dem)";
        }
    };

    public static String getName( String key ) {
        try {
            return messages.getString( key );
        }
        catch (final MissingResourceException e) {
            e.printStackTrace();
            Logger.getLogger( DataImporter.class.getName() ).warning( "No message for key " + key );
            return key;
        }
    }

    public static void loadProperties( AppState state ) {
        final File f = new File( Statics.DOTALYS_PROPERTIES );
        if (!f.exists()) {
            return;
        }

        final Properties p = new Properties();
        try {
            p.load( new FileInputStream( f ) );
            state.init( p );
        }
        catch (final IOException e) {
            Logger.getLogger( DataImporter.class.getName() ).severe( e.getMessage() );
        }
    }

    public static void parseReplayFile( Dotalys2 app, File file, ProgressListener... listeners ) {
        final DotaPlay parser = DotaPlayFactory.getInstance();
        parser.getListeners().clear();
        parser.addListener( new PlayersTracker( app ) );
        parser.addListener( new ItemTracker( app ) );
        parser.addListener( new AbilityTracker( app ) );
        parser.addListener( new HeroTracker( app ) );
        parser.addListener( new EncounterTracker( app ) );
        parser.addListener( new TowerTracker( app ) );
        parser.addListener( new CreepHandler( app ) );
        parser.addListener( new RoshanTracker( app ) );

        //Make sure this is the last one
        parser.addListener( new GeneralGameStateTracker( app ) );

        if (app instanceof GameEventListener) {
            parser.addListener( (GameEventListener) app );
        }

        parser.loadFile( file.getAbsolutePath(), listeners );

        //Note really necessary, but move away whatever data has been cached in the listeners
        parser.getListeners().clear();
    }

    public static void saveProperties( AppState state ) {
        final Properties p = new Properties();
        p.setProperty( "database.server", state.getServer() );
        p.setProperty( "database.user", state.getUser() );
        p.setProperty( "database.password", state.getPassword() );
        p.setProperty( "database", state.getDatabase() );
        p.setProperty( "database.clear", Boolean.toString( state.isClearDatabase() ) );

        try {
            p.store( new FileOutputStream( new File( Statics.DOTALYS_PROPERTIES ) ), "Generated by Dotalys2 " + Statics.DOTALYS_VERSION );
        }
        catch (final IOException e) {
            Logger.getLogger( DataImporter.class.getName() ).severe( e.getMessage() );
        }
    }

    private DataImporter() {

    }
}
